<?php

namespace Kachkaev\DAFBundle\Command\Datasets\Components;

use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

use Kachkaev\DAFBundle\Command\AbstractParameterAwareCommand;

class PopulateCommand extends AbstractParameterAwareCommand
{
    protected function configure()
    {
        $this
            ->setName('daf:datasets:components:populate')
            ->setDescription('Populates dataset component runs a query or a script')
            ->makeDatasetAware()
            ->addArgument('component-name', InputArgument::REQUIRED, 'Name of the component to populate')
            ->makeForceAware('Forces initialisation of the component before populating to avoid an error if it has already been created')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $extractedArguments = $this->processInput($input, $output);
        
        $componentName = $input->getArgument('component-name');
        $datasetManager = $this->getDatasetManager($extractedArguments['domain-name']);
        $dataset = $datasetManager->get($extractedArguments['dataset-name']);
        $componentManager = $dataset->getComponentManager();

        if (!$componentManager->has($componentName) && $input->getOption('force')) {
            $command = $this->getApplication()->find('daf:datasets:components:init');
            
            $arguments = array(
                    'command' => 'daf:datasets:components:init',
                    'dataset-full-name' => $extractedArguments['dataset-full-name'],
                    'component-name'    => $componentName,
            );
            
            $input = new ArrayInput($arguments);
            $returnCode = $command->run($input, $output);
        }
        $output->write(sprintf('Populating component <info>%s</info> in dataset <info>%s</info>...', $componentName, $dataset->getFullName()));
        
        $componentManager->populate($componentName);
        
        $output->writeln(' Done.');
    }
}